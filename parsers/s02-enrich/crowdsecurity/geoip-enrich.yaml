filter: |
  let ipv6Check = IsIPV6(evt.Meta.source_ip);
  "source_ip" in evt.Meta &&
  (
    not ipv6Check &&
    not (IpInRange(evt.Meta.source_ip, "127.0.0.0/8") || IpInRange(evt.Meta.source_ip, "192.168.0.0/16") || IpInRange(evt.Meta.source_ip, "172.16.0.0/12") || IpInRange(evt.Meta.source_ip, "10.0.0.0/8"))
  ) ||
  (
    ipv6Check &&
    not (IpInRange(evt.Meta.source_ip, "::1/128") || IpInRange(evt.Meta.source_ip, "fd00::/8") || IpInRange(evt.Meta.source_ip, "fc00::/7"))
  )

name: crowdsecurity/geoip-enrich
description: "Populate event with geoloc info : as, country, coords, source range."
data:
  - source_url: https://hub-data.crowdsec.net/mmdb_update/GeoLite2-City.mmdb
    dest_file: GeoLite2-City.mmdb
  - source_url: https://hub-data.crowdsec.net/mmdb_update/GeoLite2-ASN.mmdb
    dest_file: GeoLite2-ASN.mmdb
statics:
  - method: GeoIpCity
    expression: evt.Meta.source_ip
  - meta: IsoCode
    expression: evt.Enriched.IsoCode
  - meta: IsInEU
    expression: evt.Enriched.IsInEU
  - meta: GeoCoords
    expression: evt.Enriched.GeoCoords
  - method: GeoIpASN
    expression: evt.Meta.source_ip
  - meta: ASNNumber
    expression: evt.Enriched.ASNNumber
  - meta: ASNOrg
    expression: evt.Enriched.ASNOrg
  - method: IpToRange
    expression: evt.Meta.source_ip
  - meta: SourceRange
    expression: evt.Enriched.SourceRange
