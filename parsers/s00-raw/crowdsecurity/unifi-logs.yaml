filter: "evt.Line.Labels.type == 'unifi'"
onsuccess: next_stage
pattern_syntax:
  ACTION: (D|R|A)
  ZONE: (LAN|WAN|LOCAL|VPN|DMZ)
  IFACE_OR_EMPTY: (?:[a-zA-Z]+[0-9]*|)
  UNIFI_HOSTNAME: '(?:%{DATA:hostname},%{DATA:mac_address},%{DATA:firmware_version}|%{DATA:hostname})'
  UNIFI_FIREWALL_PREFIX: '(?:\[WAN_%{ZONE:dst_zone}-%{ACTION:action}-%{INT:rule_id}\] ?)?'
  SYSLOGBASE_UNIFI: '(?:%{SYSLOGTIMESTAMP:timestamp}|%{TIMESTAMP_ISO8601:timestamp8601}) %{UNIFI_HOSTNAME}(?: %{UNIFI_HOSTNAME})? %{UNIFI_FIREWALL_PREFIX}(?:%{SYSLOGPROG}:|)'
  SYSLOGLINE_UNIFI: '%{SYSLOGBASE_UNIFI} %{GREEDYDATA:message}'
name: crowdsecurity/unifi-logs
nodes:
  - grok:
      pattern: "^%{SYSLOGLINE_UNIFI}"
      apply_on: Line.Raw
statics:
  - parsed: program
    expression: "evt.Parsed.program != '' ? evt.Parsed.program : evt.Parsed.action != '' ? 'kernel' : ''"
  - meta: machine
    expression: evt.Parsed.hostname
  - parsed: "logsource"
    value: "syslog"
  - target: evt.StrTime
    expression: evt.Parsed.timestamp
  - target: evt.StrTime
    expression: evt.Parsed.timestamp8601
  - meta: datasource_path
    expression: evt.Line.Src
  - meta: datasource_type
    expression: evt.Line.Module
  - meta: action
    expression: 'evt.Parsed.action == "A" ? "accept" : (evt.Parsed.action == "D" ? "drop" : (evt.Parsed.action == "R" ? "reject" : "unknown"))'
  - meta: log_type
    expression: 'evt.Meta.action not in ["accept", "unknown"] ? "iptables_drop" : "iptables_event"'