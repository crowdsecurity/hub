filter: "evt.Parsed.program == 'filterlog' or evt.Parsed.message matches '^filterlog:'"
name: firewallservices/pf-logs
description: "Parse packet filter logs"
format: 2.0
pattern_syntax:
  TCP_OPTS: '((\w{1,}(;)?){0,})'
  PF_LABEL: '((P?<tracker>0{1})|(P?<tracker>[a-zA-z0-9]{32})|%{INT:tracker}|%{DATA:tracker})'
  PF_IPVER: '4|6'
  PF_UDP_DATA: '%{INT:src_port},%{INT:dst_port},%{INT:data_length}'
  PF_TCP_DATA: '%{PF_UDP_DATA},%{WORD:tcp_flags}?,%{DATA:tcp_seq}?,%{DATA:tcp_ack}?,%{DATA:tcp_window}?,%{DATA:urg_data}?,%{TCP_OPTS:tcp_options}?'
  PF_PROTOCOL_DATA: '(%{PF_TCP_DATA}|%{PF_UDP_DATA})'
  PF_IP_DATA: '%{INT:length},%{IP:src_ip},%{IP:dst_ip},'
  PF_IPv4_DATA: '%{BASE16NUM:ip4_tos},%{DATA:ip4_ecn}?,%{INT:ip4_ttl},%{INT:ip4_id},%{INT:ip4_offset},%{DATA:ip4_flags},%{INT:ip4_proto_id},%{WORD:ip4_proto},'
  PF_IPv6_DATA: '%{BASE16NUM:ip6_class},%{DATA:ip6_flow_label},%{INT:ip6_hop_limit},%{DATA:ip6_proto},%{INT:ip6_proto_id},'

  PF_IP_SPECIFIC_DATA: '(%{PF_IPv4_DATA}|%{PF_IPv6_DATA})'
  PF_LOG_DATA: '%{INT:rule},%{INT:sub_rule}?,%{DATA:anchor_text}?,%{PF_LABEL:label},%{DATA:iface},%{WORD:reason},%{WORD:action},%{WORD:direction},%{PF_IPVER:ip_ver},'
  PF_FILTERLOG: '%{PF_LOG_DATA}%{PF_IP_SPECIFIC_DATA}%{PF_IP_DATA}%{PF_PROTOCOL_DATA}'
grok:
  pattern: "%{PF_FILTERLOG}"
  apply_on: message
statics:
  - meta: log_type
    value: pf
  # set tcp/udp/icmp/ipv6-icmp
  - target: evt.Meta.service
    value: evt.Parsed.ip4_proto
  - target: evt.Meta.service
    value: evt.Parsed.ip6_proto

---
filter: "evt.Meta.log_type == 'pf' and evt.Parsed.action == 'block'"
name: firewallservices/pf-logs-drop
description: "Identify dropped packets"
onsuccess: next_stage
statics:
  - meta: service
    value: tcp
  - meta: log_type
    value: pf_drop
  - meta: source_ip
    expression: "evt.Parsed.src_ip"
