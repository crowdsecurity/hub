#debug: false
name: LePresidente/grafana-logs
filter: "evt.Parsed.program == 'grafana'"
description: "Parse grafana logs"
pattern_syntax:
  GRAFANA_AUTH_WORD: (Unauthorized|Invalid|Successful)
nodes:
  ## Main parsing section either it key value pairs or JSON
  - filter: TrimSpace(evt.Parsed.message) not startsWith "{" && ParseKV(evt.Parsed.message, evt.Unmarshaled, "grafana") in ["", nil]
    statics:
      - meta: log_format
        value: CLF
  - filter: evt.Unmarshaled.grafana == nil && UnmarshalJSON(evt.Parsed.message, evt.Unmarshaled, "grafana") in ["", nil]
    statics:
      - meta: log_format
        value: JSON

 ## Detect msg contans authentication attempt to parse out user info
  - grok:
      pattern: "%{GRAFANA_AUTH_WORD:auth_status}( username or password)?" 
      expression: evt.Unmarshaled.grafana.msg
    statics:
      - meta: log_type
        expression: 'evt.Parsed.auth_status == "Unauthorized" || evt.Parsed.auth_status == "Invalid"  ? "auth_failed" : "auth_success"'
  
  ## We filter to see if we have a log_type set from above, if not we detect if new log format
  - filter: evt.Meta.log_type == ''
    statics:
      - meta: log_type
        expression: 'evt.Unmarshaled.grafana.errorMessageID == "password-auth.failed" && evt.Unmarshaled.grafana.errorReason in ["Unauthorized", "Invalid"] ? "auth_failed" : "auth_success"'

  ## This section is a hack to allow all grafana logs to pass to next stage, if you set onsuccess next stage at root level all successful attempts will not be passed, so we could do some impossible trave sceanrios
  - filter: evt.Unmarshaled.grafana != nil
    onsuccess: next_stage
    statics:
      - meta: service
        value: grafana
statics:
    - target: evt.StrTime
      expression: evt.Unmarshaled.grafana.t
    - meta: source_ip
      expression: evt.Unmarshaled.grafana.remote_addr
