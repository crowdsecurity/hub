onsuccess: next_stage
debug: true
name: LePresidente/grafana-logs
filter: "evt.Parsed.program == 'grafana'"
description: "Parse grafana logs"
nodes:
  - grok:
      pattern: 't=%{TIMESTAMP_ISO8601:timestamp} level=%{GREEDYDATA:loglevel} msg=("Invalid username or password"|Unauthorized) error="%{GREEDYDATA:error}" remote_addr=%{IP:remote_ip}'
      apply_on: message
      statics:
        - meta: log_type
          value: grafana_failed_auth
  - filter: UnmarshalJSON(evt.Parsed.message, evt.Unmarshaled, "grafana") in ["", nil]
    nodes:
    - filter: evt.Unmarshaled.grafana.msg == 'Invalid username or password'
      nodes:
        - grok:
            pattern: '%{IP:remote_ip}'
            expression: evt.Unmarshaled.grafana.remote_addr
        - grok: 
            pattern: '%{TIMESTAMP_ISO8601:timestamp}'
            expression: evt.Unmarshaled.grafana.t
      statics:
        - meta: log_type
          value: grafana_failed_auth
statics:
    - meta: service
      value: grafana
    - target: evt.StrTime
      expression: evt.Parsed.timestamp
    - meta: source_ip
      expression: "evt.Parsed.remote_ip"
