# Copyright (c) 2014, 2015, Rudy Gevaert
# Copyright (c) 2020 Crowdsec

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# Some of the groks used here are from https://github.com/rgevaert/grok-patterns/blob/master/grok.d/postfix_patterns
onsuccess: next_stage
filter: "evt.Parsed.program endsWith '/smtpd'"
name: crowdsecurity/postfix-logs
pattern_syntax:
  POSTFIX_HOSTNAME: '(%{HOSTNAME}|unknown)'
  POSTFIX_COMMAND: '(AUTH|STARTTLS|CONNECT|EHLO|HELO|RCPT)'
  POSTFIX_ACTION: 'discard|dunno|filter|hold|ignore|info|prepend|redirect|replace|reject|warn'
  RELAY: '(?:%{HOSTNAME:remote_host}(?:\[%{IP:remote_addr}\](?::[0-9]+(.[0-9]+)?)?)?)'
  SMTP_BASIC_STATUS_CODE: '[0-9]{3}' #250
  SMTP_ENHANCED_STATUS_CODE: '[0-9.]+' #2.0.0
  SMTP_RETURN_CODES: '%{SMTP_BASIC_STATUS_CODE:smtp_basic_status_code}( %{SMTP_ENHANCED_STATUS_CODE:smtp_enhanced_status_code})?' #250 2.0.0
description: "Parse postfix logs"
nodes:
  - grok:
      apply_on: message
      pattern: 'lost connection after %{DATA:smtp_response} from %{RELAY}'
      statics:
        - meta: log_type_enh
          value: spam-attempt
  - grok:
      apply_on: message
      pattern: 'warning: %{POSTFIX_HOSTNAME:remote_host}\[%{IP:remote_addr}\]: SASL ((?i)LOGIN|PLAIN|(?:CRAM|DIGEST)-MD5) authentication failed:%{GREEDYDATA:message_failure}'
      statics:
        - meta: log_type_enh
          value: spam-attempt
  - grok:
      apply_on: message
      pattern: 'warning: non-SMTP command from %{POSTFIX_HOSTNAME:remote_host}\[%{IP:remote_addr}\]: %{GREEDYDATA:command}'
      statics:
        - meta: log_type_enh
          value: non-smtp-command
  - grok:
      apply_on: message
      pattern: 'NOQUEUE: %{POSTFIX_ACTION:action}: %{DATA:command} from %{RELAY}: %{SMTP_RETURN_CODES:smtp_return_codes} %{GREEDYDATA:reason}'
      statics:
        - meta: action
          expression: "evt.Parsed.action"
    nodes:
      ## We check if the reason is not a service unavailable if so we parser more information
      - filter: "evt.Parsed.reason != 'Service unavailable'"
        grok:
          apply_on: reason
          pattern: "<%{DATA:helo}>: %{GREEDYDATA:reason}; %{GREEDYDATA:kvItems}"
        statics:
          - parsed: unused
            expression: ParseKV(evt.Parsed.kvItems, evt.Unmarshaled, "postfix")
          - meta: reason
            expression: "evt.Parsed.reason"
statics:
    - meta: service
      value: postfix
    - meta: source_ip
      expression: "evt.Parsed.remote_addr"
    - meta: source_hostname
      expression: "evt.Parsed.remote_host"
    - meta: log_type
      value: postfix

