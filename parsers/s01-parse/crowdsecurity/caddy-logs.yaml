filter: "evt.Parsed.program startsWith 'caddy' && UnmarshalJSON(evt.Parsed.message, evt.Unmarshaled, 'caddy') in ['', nil]"
onsuccess: next_stage
# debug: true
name: crowdsecurity/caddy-logs
description: "Parse caddy logs"
pattern_syntax:
 CUSTOMDATE: '%{DAY:day}, %{MONTHDAY:monthday} %{MONTH:month} %{YEAR:year} %{TIME:time} %{WORD:tz}'
statics:
  - meta: log_type
    value: http_access-log
  - meta: service
    value: http
  - meta: source_ip
    expression: evt.Unmarshaled.caddy.remote_addr
  - meta: source_ip
    expression: evt.Unmarshaled.caddy.remote_ip
  - meta: http_status
    expression: int(evt.Unmarshaled.caddy.status)
  - meta: http_path
    expression: evt.Unmarshaled.caddy.request.uri
  - parsed: request #Add for http-logs enricher
    expression: evt.Unmarshaled.caddy.request.uri
  - parsed: verb
    expression: evt.Unmarshaled.caddy.request.method
  - meta: http_verb
    expression: evt.Unmarshaled.caddy.request.method
  - meta: http_user_agent
    expression: evt.Unmarshaled.caddy.request.headers['User-Agent'][0]
  - meta: target_fqdn
    expression: evt.Unmarshaled.caddy.request.host
  - meta: sub_type
    expression: "evt.Parsed.status == '401' && evt.Unmarshaled.request.headers.Authorization startsWith 'Basic ' ? 'auth_fail' : ''"