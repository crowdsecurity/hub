filter: "evt.Parsed.program startsWith 'caddy' && UnmarshalJSON(evt.Parsed.message, evt.Unmarshaled, 'caddy') in ['', nil]"
onsuccess: next_stage
name: crowdsecurity/caddy-logs
description: "Parse caddy logs"
statics:
  - meta: log_type
    value: http_access-log
  - target: evt.StrTime
    expression: |
      Sprintf("%v", evt.Unmarshaled.caddy.ts) matches '^[0-9e\\.\\+]+$' ? int(evt.Unmarshaled.caddy.ts) : evt.Unmarshaled.caddy.ts
  - meta: service
    value: http
  ##Caddy now sets client_ip to the value of X-Forwarded-For if users sets trusted proxies
  - parsed: remote_ip
    expression: evt.Unmarshaled.caddy.request.client_ip
  - parsed: remote_addr
    expression: "evt.Unmarshaled.caddy.request.remote_addr != nil ? Split(evt.Unmarshaled.caddy.request.remote_addr, ':')[0] : nil"
  - meta: source_ip
    expression: evt.Parsed.remote_ip
  - meta: http_status
    expression: int(evt.Unmarshaled.caddy.status)
  - meta: http_path
    expression: evt.Unmarshaled.caddy.request.uri
  - parsed: request #Add for http-logs enricher
    expression: evt.Unmarshaled.caddy.request.uri
  - parsed: verb
    expression: evt.Unmarshaled.caddy.request.method
  - meta: http_verb
    expression: evt.Unmarshaled.caddy.request.method
  - parsed: http_user_agent
    expression: evt.Unmarshaled.caddy.request.headers['User-Agent'][0]
  - meta: http_user_agent
    expression: evt.Unmarshaled.caddy.request.headers['User-Agent'][0]
  - meta: target_fqdn
    expression: evt.Unmarshaled.caddy.request.host
  - meta: sub_type
    expression: "evt.Meta.http_status == '401' && evt.Unmarshaled.request.headers.Authorization startsWith 'Basic ' ? 'auth_fail' : ''"