# co-authored with gmelodie (https://github.com/gmelodie)
name: crowdsecurity/traefik-logs
description: "Parse Traefik access logs"
filter: "evt.Parsed.program startsWith 'traefik'"
#debug: true
onsuccess: next_stage
pattern_syntax:
  TRAEFIK_ROUTER: '(%{USER}@%{URIHOST}|\-)'
  TRAEFIK_SERVER_URL: '(%{URI}|\-)'
  NUMBER_MINUS: '[0-9-]+'
  NGCUSTOMUSER: '[a-zA-Z0-9\.\@\-\+_%]+'
  NGINXACCESS2: '%{IPORHOST:remote_addr} - %{NGCUSTOMUSER:remote_user} \[%{HTTPDATE:time_local}\] "%{WORD:verb} %{DATA:request} HTTP/%{NUMBER:http_version}" %{NUMBER_MINUS:status} %{NUMBER_MINUS:body_bytes_sent} "%{NOTDQUOTE:http_referer}" "%{NOTDQUOTE:http_user_agent}"'
nodes:
  - grok: # CLF parser
      pattern: '%{NGINXACCESS2} %{NUMBER:number_of_requests_received_since_traefik_started} "%{TRAEFIK_ROUTER:traefik_router_name}" "%{TRAEFIK_SERVER_URL:traefik_server_url}" %{NUMBER:request_duration_in_ms}ms'
      apply_on: message
  - filter: UnmarshalJSON(evt.Line.Raw, evt.Unmarshaled, "traefik") in ["", nil]
    statics:
      - parsed: remote_addr
        expression: evt.Unmarshaled.traefik.ClientHost
      - parsed: dest_addr
        ## Split dest_addr to get IP only as this is original functionality
        expression: Split(evt.Unmarshaled.traefik.ClientAddr, ':')[0]
      - parsed: request_addr
        expression: evt.Unmarshaled.traefik.RequestAddr
      - parsed: service_addr
        ## Split service_addr to get IP only as this is original functionality
        expression: "evt.Unmarshaled.traefik.ServiceAddr != nil ? Split(evt.Unmarshaled.traefik.ServiceAddr, ':')[0] : nil"
      - parsed: http_user_agent
        expression: evt.Unmarshaled.traefik["request_User-Agent"] ## We have to access via [] as the key contains a dash 
      - parsed: body_bytes_sent
        ## We have to check if DownstreamContentSize is nil, as it will cause EXPR error if it is 
        expression: "evt.Unmarshaled.traefik.DownstreamContentSize != nil ? int(evt.Unmarshaled.traefik.DownstreamContentSize) : nil"
      - parsed: request_duration_in_ms
        expression: int(evt.Unmarshaled.traefik.Duration)
      - parsed: traefik_router_name
        expression: evt.Unmarshaled.traefik.RouterName
      - parsed: time_local
        expression: evt.Unmarshaled.traefik.time
      - parsed: verb
        expression: evt.Unmarshaled.traefik.RequestMethod
      - parsed: request
        expression: evt.Unmarshaled.traefik.RequestPath
      - parsed: http_version
        ## Split http_version to get version only as this is original functionality
        expression: Split(evt.Unmarshaled.traefik.RequestProtocol, '/')[1]
      - parsed: status
        expression: int(evt.Unmarshaled.traefik.DownstreamStatus)
statics:
  - meta: service
    value: http
  - meta: http_status
    expression: "evt.Parsed.status"
  - meta: http_path
    expression: "evt.Parsed.request"
  - meta: user
    expression: "evt.Parsed.remote_user"
  - meta: source_ip
    expression: "evt.Parsed.remote_addr"
  - meta: http_user_agent
    expression: "evt.Parsed.http_user_agent"
  - meta: log_type
    value: http_access-log
  - target: evt.StrTime
    expression: "evt.Parsed.time_local"
  - meta: traefik_router_name
    expression: "evt.Parsed.traefik_router_name"
  - meta: http_verb
    expression: "evt.Parsed.verb"
