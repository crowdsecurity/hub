name: crowdsecurity/auditd-logs
description: "Parse auditd logs"
filter: "evt.Parsed.program == 'auditd'"
onsuccess: next_stage
pattern_syntax:
  FLOAT: '[0-9\.]+'

nodes:
  #SYSCALL 59 on x86_64 -> execve
  - filter: ParseKV(evt.Parsed.message, evt.Unmarshaled, "auditd") == nil # == nil is required because ParseKV does not return a value
    nodes:
      - grok:
          pattern: '%{WORD:msg_type}\(%{FLOAT:timestamp}:%{INT:event_inc_id}\):'
          expression: evt.Unmarshaled.auditd.msg
        nodes:
# type=PATH msg=audit(1734112431.675:3784): item=1 name="/bin/sh" inode=5505165 dev=08:02 mode=0100755 ouid=0 ogid=0 rdev=00:00 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0
          - filter: evt.Unmarshaled.auditd.type == "PATH"
            statics:
              - meta: log_type
                value: auditd_path
              - meta: item
                expression: evt.Unmarshaled.auditd.item
              - meta: name
                expression: evt.Unmarshaled.auditd.name
              - meta: inode
                expression: evt.Unmarshaled.auditd.inode
              - meta: dev
                expression: evt.Unmarshaled.auditd.dev
              - meta: mode
                expression: evt.Unmarshaled.auditd.mode
              - meta: ouid
                expression: evt.Unmarshaled.auditd.ouid
              - meta: ogid
                expression: evt.Unmarshaled.auditd.ogid
              - meta: rdev
                expression: evt.Unmarshaled.auditd.rdev
              - meta: nametype
                expression: evt.Unmarshaled.auditd.nametype
              - meta: cap_fp
                expression: evt.Unmarshaled.auditd.cap_fp
              - meta: cap_fi
                expression: evt.Unmarshaled.auditd.cap_fi
              - meta: cap_fe
                expression: evt.Unmarshaled.auditd.cap_fe
              - meta: cap_fver
                expression: evt.Unmarshaled.auditd.cap_fver
              - meta: cap_frootid
                expression: evt.Unmarshaled.auditd.cap_frootid
              # for SE linux
              - meta: obj
                expression: evt.Unmarshaled.auditd.obj
              - meta: objtype
                expression: evt.Unmarshaled.auditd.objtype
              # end of SE linux
#type=SERVICE_STOP msg=audit(1734365831.272:876): pid=1 uid=0 auid=4294967295 ses=4294967295 subj=unconfined msg='unit=packagekit comm="systemd" exe="/usr/lib/systemd/systemd" hostname=? addr=? terminal=? res=success'UID="root" AUID="unset"
          - filter: evt.Unmarshaled.auditd.type == "SERVICE_STOP"
            statics:
              - meta: log_type
                value: auditd_service_stop

# type=EXECVE msg=audit(1734093713.565:1031): argc=101 a0="id" a1="1" a2="2" a3="3" a4="4" a5="5" a6="6" a7="7" a8="8" a9="9" a10="10" a11="11" a12="12" a13="13" a14="14" a15="15" a16="16" a17="17" a18="18" a19="19" a20="20" a21="21" a22="22" a23="23" a24="24" a25="25" a26="26" a27="27" a28="28" a29="29" a30="30" a31="31" a32="32" a33="33" a34="34" a35="35" a36="36" a37="37" a38="38" a39="39" a40="40" a41="41" a42="42" a43="43" a44="44" a45="45" a46="46" a47="47" a48="48" a49="49" a50="50" a51="51" a52="52" a53="53" a54="54" a55="55" a56="56" a57="57" a58="58" a59="59" a60="60" a61="61" a62="62" a63="63" a64="64" a65="65" a66="66" a67="67" a68="68" a69="69" a70="70" a71="71" a72="72" a73="73" a74="74" a75="75" a76="76" a77="77" a78="78" a79="79" a80="80" a81="81" a82="82" a83="83" a84="84" a85="85" a86="86" a87="87" a88="88" a89="89" a90="90" a91="91" a92="92" a93="93" a94="94" a95="95" a96="96" a97="97" a98="98" a99="99" a100="100"
          - filter: evt.Unmarshaled.auditd.type == "EXECVE"
            statics:
              - meta: log_type
                value: auditd_execve
              - meta: execve_full_str
                #we only keep the "a[0-9]+" keys and join them into a string
                #we're not dealing yet with hex encoded arguments
                expression: |
                  let args = evt.Unmarshaled.auditd | keys() | filter(# matches "^a[0-9]+$");
                  map(sortBy(args, { int(#[1:]) }, "asc"), get(evt.Unmarshaled.auditd, #)) | join(" ")
              #For compatibility with Sigma, we'll as well keep the a1/a2/a... args
              - parsed: a1
                expression: evt.Unmarshaled.auditd.a1
              - parsed: a2
                expression: evt.Unmarshaled.auditd.a2
              - parsed: a3
                expression: evt.Unmarshaled.auditd.a3
              - parsed: a4
                expression: evt.Unmarshaled.auditd.a4
              - parsed: a5
                expression: evt.Unmarshaled.auditd.a5
              - parsed: a6
                expression: evt.Unmarshaled.auditd.a6
              - parsed: a7
                expression: evt.Unmarshaled.auditd.a7
# type=SYSCALL msg=audit(1734093141.455:922): arch=c000003e syscall=59 success=yes exit=0 a0=563db14c9800 a1=563db14c6370 a2=563db14c5e70 a3=8 items=2 ppid=1344351 pid=1344358 auid=1000 uid=1000 gid=1000 euid=1000 suid=1000 fsuid=1000 egid=1000 sgid=1000 fsgid=1000 tty=pts1 ses=5448 comm="id" exe="/usr/bin/id" key="recon"
          - filter: evt.Unmarshaled.auditd.type == "SYSCALL" and evt.Unmarshaled.auditd.arch == "c000003e" and evt.Unmarshaled.auditd.syscall == "59"
            statics:
              - meta: syscall_num
                expression: evt.Unmarshaled.auditd.syscall
              - meta: log_type
                value: auditd_syscall_execve
              #let's hydrate with ppid process if we can :)
              - target: evt.Meta.parent_progname
                expression: GetFromStash("auditd_pid_progname", evt.Unmarshaled.auditd.ppid)
            #let's capture process name if we can
            stash:
              - name: auditd_pid_progname
                key: evt.Unmarshaled.auditd.pid
                value: evt.Unmarshaled.auditd.exe
                ttl: 1m
                size: 100
          - filter: evt.Unmarshaled.auditd.type == "ANOM_ABEND"
            statics:
              - meta: log_type
                value: auditd_anom_abend
        statics:
          - target: evt.StrTime
            expression: evt.Parsed.timestamp
          - meta: ppid
            expression: evt.Unmarshaled.auditd.ppid
          - meta: exe
            expression: evt.Unmarshaled.auditd.exe
          - meta: uid
            expression: evt.Unmarshaled.auditd.uid
          - meta: auid
            expression: evt.Unmarshaled.auditd.auid
          - meta: euid
            expression: evt.Unmarshaled.auditd.euid
          - meta: gid
            expression: evt.Unmarshaled.auditd.gid
          - meta: ses
            expression: evt.Unmarshaled.auditd.ses
          - meta: subj
            expression: evt.Unmarshaled.auditd.subj
          - meta: pid
            expression: evt.Unmarshaled.auditd.pid
          - meta: comm
            expression: evt.Unmarshaled.auditd.comm
          - meta: sig
            expression: evt.Unmarshaled.auditd.sig
          - meta: tty
            expression: evt.Unmarshaled.auditd.tty
          - meta: res
            expression: evt.Unmarshaled.auditd.res
          - meta: str_UID
            expression: evt.Unmarshaled.auditd.UID
          - meta: str_GID
            expression: evt.Unmarshaled.auditd.GID 
          - meta: auditd_eventid
            expression: evt.Parsed.event_inc_id
          - meta: auditd_type
            expression: evt.Unmarshaled.auditd.type
