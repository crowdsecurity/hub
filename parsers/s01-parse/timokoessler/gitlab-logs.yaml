onsuccess: next_stage
filter: "Upper(evt.Parsed.program) == 'GITLAB' && UnmarshalJSON(evt.Parsed.message, evt.Unmarshaled, 'gitlab') in ['', nil]"
name: timokoessler/gitlab-logs
description: "Parse GitLab Logs"
nodes:
  - filter: |
      evt.Unmarshaled.gitlab.method == 'POST' &&
      evt.Unmarshaled.gitlab.path in ['/users/sign_in', '/users/auth/ldapmain/callback'] &&
      any(evt.Unmarshaled.gitlab.params, {.key == 'user' && .value.login != ''}) &&
      (evt.Unmarshaled.gitlab.status == 0 || evt.Unmarshaled.gitlab.action == 'failure')
    statics:
      - meta: log_type
        value: "gitlab_failed_password"
      - meta: username
        expression: filter(evt.Unmarshaled.gitlab.params, {.key == 'user' && .value.login != ''})[0]['value']['login']
  - filter: |
      evt.Unmarshaled.gitlab.method == 'POST' &&
      evt.Unmarshaled.gitlab.path in ['/users/sign_in', '/users/auth/ldapmain/callback'] &&
      any(evt.Unmarshaled.gitlab.params, {.key == 'username' && .value != ''}) &&
      (evt.Unmarshaled.gitlab.status == 0 || evt.Unmarshaled.gitlab.action == 'failure')
    statics:
      - meta: log_type
        value: "gitlab_failed_password"
      - meta: username
        expression: filter(evt.Unmarshaled.gitlab.params, {.key == 'username' && .value != ''})[0]['value']
  - filter: |
      evt.Unmarshaled.gitlab.method == 'POST' &&
      evt.Unmarshaled.gitlab.path == '/users/sign_in' &&
      any(evt.Unmarshaled.gitlab.params, {.key == 'user' && .value.otp_attempt != nil}) &&
      evt.Unmarshaled.gitlab.status != 302
    statics:
      - meta: log_type
        value: "gitlab_failed_totp"

statics:
  - meta: service
    value: gitlab
  - meta: source_ip
    expression: evt.Unmarshaled.gitlab.remote_ip
  - parsed: timestamp
    expression: evt.Unmarshaled.gitlab.time
  - target: evt.StrTime
    expression: "evt.Parsed.timestamp"
