filter: 'evt.Parsed.program == "zoneminder"'
#debug: true
onsuccess: next_stage
name: baudneo/zoneminder-logs
description: A parser for zoneminder web_php.log (Logins to DB/Web/API), now datetime agnostic
pattern_syntax:
  ZM_BADUSER: '%{GREEDYDATA:zmtime}\sweb_php\[%{POSINT:pid}]\.%{WORD:log_level} \[(%{IP:source_ip})\]\s\[Could not retrieve user %{DATA:username} details\] at %{UNIXPATH:filename} line %{NONNEGINT:lineno}'
  ZM_BADPASS: '%{GREEDYDATA:zmtime}\sweb_php\[%{POSINT:pid}]\.%{WORD:log_level} \[(%{IP:source_ip})\]\s\[Login denied for user \"%{DATA:username}\"\] at %{UNIXPATH:filename} line %{NONNEGINT:lineno}'

nodes:
  - grok:
      name: "ZM_BADPASS"
      apply_on: message
      statics:
        - meta: log_type
          value: zm_failed_auth
        - meta: log_subtype
          value: zm_bad_password
        - meta: username
          expression: evt.Parsed.username
  - grok:
      name: "ZM_BADUSER"
      apply_on: message
      statics:
        - meta: log_type
          value: zm_failed_auth
        - meta: log_subtype
          value: zm_bad_user
        - meta: username
          expression: evt.Parsed.username

statics:
  - meta: source_ip
    expression: evt.Parsed.source_ip
  - target: StrTime
    expression: |-
      evt.Parsed.zmtime
