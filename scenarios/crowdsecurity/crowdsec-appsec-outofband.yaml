# just count distinct number of requests getting blocked
type: leaky
filter: evt.Parsed.program == 'crowdsec-waap' && evt.Appsec.HasInBandMatches == false && evt.Parsed.action in ["deny", "drop"]
name: crowdsecurity/crowdsec-appsec-outofband
description: IP has triggered more than 5 CrowdSec Out Of Band Waap rules
blackhole: 2m
leakspeed: 30s
capacity: 5
labels:
  type: exploit
  remediation: true
groupby: "evt.Meta.source_ip"
#---
# at least requests blocked on 3 distinct URIs
#type: leaky
#debug: true
#filter: evt.Parsed.program == 'crowdsec-waap' && evt.Parsed.action == "deny"
#name: crowdsecurity/waf-probing
#description: "WAF probing"
#blackhole: 2m
#leakspeed: 60s
#capacity: 5
#groupby: "evt.Meta.source_ip + evt.Parsed.target_uri"
#labels:
#  type: exploit
#  remediation: true
#---
# # at least 5 requests blocked with **distinct** IDs
#type: conditional
#debug: true
#name: crowdsecurity/xss-probing
#description: at least 5 different XSS rules
#filter: evt.Parsed.program == 'crowdsec-waap' && evt.Parsed.action == "deny"
#condition: len( distinct( merge( all(evt.Queue, { #.Waap.GetIDs()}) ) ) ) > 5
#condition: |
#  LogInfo("%+v", FlattenDistinct( 
#      map( queue.Queue, 
#      #.Waap.ByTagRx(".*xss.*").GetRuleIDs()
#      ) 
#    )) &&
#  len( 
#    FlattenDistinct( 
#      map( queue.Queue, 
#      #.Waap.ByTagRx(".*xss.*").GetRuleIDs()
#      ) 
#    )) > 5
#condition: 'Distance("aa", "bb", "cc", { #.Parsed.toto == 1 })'
#capacity: -1
#cache_size: 1000
#leakspeed: 30s
#distinct: evt.Meta.source_ip